require('dotenv').config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const puppeteer = require('puppeteer-core');
const chromium = require('chrome-aws-lambda');

async function startBot() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ WhatsApp –±–æ—Ç–∞...");
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ Chrome –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
    let executablePath = await chromium.executablePath || '/usr/bin/google-chrome-stable';
    
    const client = new Client({
        authStrategy: new LocalAuth(),
        puppeteer: {
            executablePath,
            headless: true,
            args: [
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-accelerated-2d-canvas",
                "--no-first-run",
                "--no-zygote",
                "--single-process",
                "--disable-gpu"
            ]
        }
    });

    let settings = {
        totalPeople: null,
        drinkers: null,
        bathCost: null,
        expenses: [],
        waitingFor: null
    };

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if (fs.existsSync("data.json")) {
        settings = JSON.parse(fs.readFileSync("data.json"));
    }

    client.on('qr', qr => {
        qrcode.generate(qr, { small: true });
        console.log("üîπ –°–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó!");
    });

    client.on('ready', () => {
        console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
    });

    client.on('message', async msg => {
        let text = msg.body.trim().toLowerCase();
        console.log(`üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${msg.body}"`);

        if (text === "!—Å—Ç–∞—Ä—Ç") {
            settings.expenses = [];
            settings.waitingFor = "totalPeople";
            msg.reply("üìå –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –ª—é–¥–µ–π –±—É–ª–æ –Ω–∞ –∑–∞—Ö–æ–¥—ñ?");
            saveData(settings);
            return;
        }

        if (settings.waitingFor === "totalPeople") {
            let number = parseInt(text);
            if (!isNaN(number) && number > 0) {
                settings.totalPeople = number;
                settings.waitingFor = "drinkers";
                msg.reply("üçæ –°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –ø–∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å?");
                saveData(settings);
            } else {
                msg.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π.");
            }
            return;
        }

        if (settings.waitingFor === "drinkers") {
            let number = parseInt(text);
            if (!isNaN(number) && number >= 0 && number <= settings.totalPeople) {
                settings.drinkers = number;
                settings.waitingFor = "bathCost";
                msg.reply("üõÅ –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É–≤–∞–ª–∞ –±–∞–Ω—è?");
                saveData(settings);
            } else {
                msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤.");
            }
            return;
        }

        if (settings.waitingFor === "bathCost") {
            let number = parseInt(text);
            if (!isNaN(number) && number >= 0) {
                settings.bathCost = number;
                settings.waitingFor = "expenses";
                msg.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–Ü–º'—è 1000 —ó–∂–∞`, `–Ü–º'—è 500 –∞–ª–∫–æ–≥–æ–ª—å`, `–Ü–º'—è 2000 –±–∞–Ω—è`. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à—ñ—Ç—å `–≥–æ—Ç–æ–≤–æ`.");
                saveData(settings);
            } else {
                msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É –∑–∞ –±–∞–Ω—é.");
            }
            return;
        }
    });

    client.initialize();
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function saveData(settings) {
    fs.writeFileSync("data.json", JSON.stringify(settings, null, 2));
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
startBot().catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", err));
