require('dotenv').config(); // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É .env
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');

const client = new Client({
    puppeteer: {
        headless: true,
        args: [
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--disable-dev-shm-usage",
            "--disable-accelerated-2d-canvas",
            "--no-first-run",
            "--no-zygote",
            "--single-process",
            "--disable-gpu"
        ]
    },
    authStrategy: new LocalAuth()
});

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
    console.log("üîπ QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ");
});

client.on('ready', () => {
    console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
});

client.on('message', async msg => {
    let text = msg.body.trim().toLowerCase();
    console.log(`üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${msg.body}" (–æ–±—Ä–æ–±–∫–∞: "${text}")`);

    if (text === "!—Å—Ç–∞—Ä—Ç") {
        settings.expenses = [];
        settings.waitingFor = "totalPeople";
        msg.reply("üìå –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –ª—é–¥–µ–π –±—É–ª–æ –Ω–∞ –∑–∞—Ö–æ–¥—ñ?");
        return;
    }

    if (settings.waitingFor === "totalPeople") {
        let number = parseInt(text);
        if (!isNaN(number) && number > 0) {
            settings.totalPeople = number;
            settings.waitingFor = "drinkers";
            msg.reply("üçæ –°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –ø–∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å?");
        } else {
            msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π.");
        }
        return;
    }

    if (settings.waitingFor === "drinkers") {
        let number = parseInt(text);
        if (!isNaN(number) && number >= 0 && number <= settings.totalPeople) {
            settings.drinkers = number;
            settings.waitingFor = "bathCost";
            msg.reply("üõÅ –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ (–∞–±–æ 0, —è–∫—â–æ —ó—ó –Ω–µ –±—É–ª–æ).");
        } else {
            msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤.");
        }
        return;
    }

    if (settings.waitingFor === "bathCost") {
        let number = parseInt(text);
        if (!isNaN(number) && number >= 0) {
            settings.bathCost = number;
            settings.waitingFor = "expenses";
            msg.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n`–Ü–º'—è 1000 —ó–∂–∞`\n`–Ü–º'—è 500 –∞–ª–∫–æ–≥–æ–ª—å`\n`–Ü–º'—è 2000 –±–∞–Ω—è`\n\n–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à—ñ—Ç—å `–≥–æ—Ç–æ–≤–æ`.");
        } else {
            msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ.");
        }
        return;
    }

    if (settings.waitingFor === "expenses") {
        if (text === "–≥–æ—Ç–æ–≤–æ") {
            settings.waitingFor = null;
            msg.reply(calculatePayments());
            return;
        }

        let parts = text.split(" ");
        if (parts.length < 3) {
            msg.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `–Ü–º'—è 1000 —ó–∂–∞`, `–Ü–º'—è 500 –∞–ª–∫–æ–≥–æ–ª—å`, `–Ü–º'—è 2000 –±–∞–Ω—è`.");
            return;
        }

        let name = parts[0].charAt(0).toUpperCase() + parts[0].slice(1);
        let amount = parseInt(parts[1]);
        let category = parts[2].toLowerCase();

        if (isNaN(amount) || !["—ó–∂–∞", "–∞–ª–∫–æ–≥–æ–ª—å", "–±–∞–Ω—è"].includes(category)) {
            msg.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (—ó–∂–∞, –∞–ª–∫–æ–≥–æ–ª—å, –±–∞–Ω—è).");
            return;
        }

        settings.expenses.push({ name, amount, category });
        msg.reply(`‚úÖ –î–æ–¥–∞–Ω–æ: ${name} –≤–∏—Ç—Ä–∞—Ç–∏–≤ ${amount} –≥—Ä–Ω –Ω–∞ ${category}.`);
        return;
    }

    msg.reply("‚ùå –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ü–æ—á–Ω—ñ—Ç—å –∑ `!—Å—Ç–∞—Ä—Ç`.");
});

function calculatePayments() {
    let totalSpent = { "—ó–∂–∞": 0, "–∞–ª–∫–æ–≥–æ–ª—å": 0, "–±–∞–Ω—è": settings.bathCost };
    let contributions = {};

    settings.expenses.forEach(exp => {
        totalSpent[exp.category] += exp.amount;
        if (!contributions[exp.name]) {
            contributions[exp.name] = { "—ó–∂–∞": 0, "–∞–ª–∫–æ–≥–æ–ª—å": 0, "–±–∞–Ω—è": 0 };
        }
        contributions[exp.name][exp.category] += exp.amount;
    });

    let perPersonFood = totalSpent["—ó–∂–∞"] / settings.totalPeople;
    let perPersonBath = totalSpent["–±–∞–Ω—è"] / settings.totalPeople;
    let perDrinkerAlcohol = settings.drinkers > 0 ? totalSpent["–∞–ª–∫–æ–≥–æ–ª—å"] / settings.drinkers : 0;

    let balances = {};
    Object.keys(contributions).forEach(name => {
        let spent = (contributions[name]["—ó–∂–∞"] || 0) + (contributions[name]["–∞–ª–∫–æ–≥–æ–ª—å"] || 0) + (contributions[name]["–±–∞–Ω—è"] || 0);
        let shouldPay = perPersonFood + perPersonBath + (contributions[name]["–∞–ª–∫–æ–≥–æ–ª—å"] > 0 ? perDrinkerAlcohol : 0);
        balances[name] = spent - shouldPay;
    });

    let result = `üìä *–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç:*\n`;
    result += `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${totalSpent["—ó–∂–∞"] + totalSpent["–∞–ª–∫–æ–≥–æ–ª—å"] + totalSpent["–±–∞–Ω—è"]} –≥—Ä–Ω\n`;
    result += `–ö–æ–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ó–∂—É: ${perPersonFood.toFixed(2)} –≥—Ä–Ω\n`;
    result += `–ö–æ–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –±–∞–Ω—é: ${perPersonBath.toFixed(2)} –≥—Ä–Ω\n`;
    result += settings.drinkers > 0 ? `–ö–æ–∂–µ–Ω, —Ö—Ç–æ –ø–∏–≤, –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∞–ª–∫–æ–≥–æ–ª—å: ${perDrinkerAlcohol.toFixed(2)} –≥—Ä–Ω\n\n` : "\n";

    Object.keys(balances).forEach(name => {
        if (balances[name] > 0) {
            result += `‚úÖ ${name} –ø–µ—Ä–µ–ø–ª–∞—Ç–∏–≤: ${balances[name].toFixed(2)} –≥—Ä–Ω (–π–æ–º—É –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å)\n`;
        } else {
            result += `‚ùå ${name} –≤–∏–Ω–µ–Ω: ${(-balances[name]).toFixed(2)} –≥—Ä–Ω\n`;
        }
    });

    return result;
}
